{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A container for all of the Logger instances\r\n */\nconst instances = [];\n/**\r\n * The JS SDK supports 5 log levels and also allows a user the ability to\r\n * silence the logs altogether.\r\n *\r\n * The order is a follows:\r\n * DEBUG < VERBOSE < INFO < WARN < ERROR\r\n *\r\n * All of the log types above the current log level will be captured (i.e. if\r\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\r\n * `VERBOSE` logs will not)\r\n */\n\nvar LogLevel;\n\n(function (LogLevel) {\n  LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\n  LogLevel[LogLevel[\"VERBOSE\"] = 1] = \"VERBOSE\";\n  LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\n  LogLevel[LogLevel[\"WARN\"] = 3] = \"WARN\";\n  LogLevel[LogLevel[\"ERROR\"] = 4] = \"ERROR\";\n  LogLevel[LogLevel[\"SILENT\"] = 5] = \"SILENT\";\n})(LogLevel || (LogLevel = {}));\n\nconst levelStringToEnum = {\n  'debug': LogLevel.DEBUG,\n  'verbose': LogLevel.VERBOSE,\n  'info': LogLevel.INFO,\n  'warn': LogLevel.WARN,\n  'error': LogLevel.ERROR,\n  'silent': LogLevel.SILENT\n};\n/**\r\n * The default log level\r\n */\n\nconst defaultLogLevel = LogLevel.INFO;\n/**\r\n * By default, `console.debug` is not displayed in the developer console (in\r\n * chrome). To avoid forcing users to have to opt-in to these logs twice\r\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\r\n * logs to the `console.log` function.\r\n */\n\nconst ConsoleMethod = {\n  [LogLevel.DEBUG]: 'log',\n  [LogLevel.VERBOSE]: 'log',\n  [LogLevel.INFO]: 'info',\n  [LogLevel.WARN]: 'warn',\n  [LogLevel.ERROR]: 'error'\n};\n/**\r\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\r\n * messages on to their corresponding console counterparts (if the log method\r\n * is supported by the current log level)\r\n */\n\nconst defaultLogHandler = function (instance, logType) {\n  if (logType < instance.logLevel) {\n    return;\n  }\n\n  const now = new Date().toISOString();\n  const method = ConsoleMethod[logType];\n\n  if (method) {\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    console[method](`[${now}]  ${instance.name}:`, ...args);\n  } else {\n    throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);\n  }\n};\n\nclass Logger {\n  /**\r\n   * Gives you an instance of a Logger to capture messages according to\r\n   * Firebase's logging scheme.\r\n   *\r\n   * @param name The name that the logs will be associated with\r\n   */\n  constructor(name) {\n    this.name = name;\n    /**\r\n     * The log level of the given Logger instance.\r\n     */\n\n    this._logLevel = defaultLogLevel;\n    /**\r\n     * The main (internal) log handler for the Logger instance.\r\n     * Can be set to a new function in internal package code but not by user.\r\n     */\n\n    this._logHandler = defaultLogHandler;\n    /**\r\n     * The optional, additional, user-defined log handler for the Logger instance.\r\n     */\n\n    this._userLogHandler = null;\n    /**\r\n     * Capture the current instance for later use\r\n     */\n\n    instances.push(this);\n  }\n\n  get logLevel() {\n    return this._logLevel;\n  }\n\n  set logLevel(val) {\n    if (!(val in LogLevel)) {\n      throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\n    }\n\n    this._logLevel = val;\n  } // Workaround for setter/getter having to be the same type.\n\n\n  setLogLevel(val) {\n    this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\n  }\n\n  get logHandler() {\n    return this._logHandler;\n  }\n\n  set logHandler(val) {\n    if (typeof val !== 'function') {\n      throw new TypeError('Value assigned to `logHandler` must be a function');\n    }\n\n    this._logHandler = val;\n  }\n\n  get userLogHandler() {\n    return this._userLogHandler;\n  }\n\n  set userLogHandler(val) {\n    this._userLogHandler = val;\n  }\n  /**\r\n   * The functions below are all based on the `console` interface\r\n   */\n\n\n  debug() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\n\n    this._logHandler(this, LogLevel.DEBUG, ...args);\n  }\n\n  log() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    this._userLogHandler && this._userLogHandler(this, LogLevel.VERBOSE, ...args);\n\n    this._logHandler(this, LogLevel.VERBOSE, ...args);\n  }\n\n  info() {\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n\n    this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\n\n    this._logHandler(this, LogLevel.INFO, ...args);\n  }\n\n  warn() {\n    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      args[_key5] = arguments[_key5];\n    }\n\n    this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\n\n    this._logHandler(this, LogLevel.WARN, ...args);\n  }\n\n  error() {\n    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      args[_key6] = arguments[_key6];\n    }\n\n    this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\n\n    this._logHandler(this, LogLevel.ERROR, ...args);\n  }\n\n}\n\nfunction setLogLevel(level) {\n  instances.forEach(inst => {\n    inst.setLogLevel(level);\n  });\n}\n\nfunction setUserLogHandler(logCallback, options) {\n  for (const instance of instances) {\n    let customLogLevel = null;\n\n    if (options && options.level) {\n      customLogLevel = levelStringToEnum[options.level];\n    }\n\n    if (logCallback === null) {\n      instance.userLogHandler = null;\n    } else {\n      instance.userLogHandler = function (instance, level) {\n        for (var _len7 = arguments.length, args = new Array(_len7 > 2 ? _len7 - 2 : 0), _key7 = 2; _key7 < _len7; _key7++) {\n          args[_key7 - 2] = arguments[_key7];\n        }\n\n        const message = args.map(arg => {\n          if (arg == null) {\n            return null;\n          } else if (typeof arg === 'string') {\n            return arg;\n          } else if (typeof arg === 'number' || typeof arg === 'boolean') {\n            return arg.toString();\n          } else if (arg instanceof Error) {\n            return arg.message;\n          } else {\n            try {\n              return JSON.stringify(arg);\n            } catch (ignored) {\n              return null;\n            }\n          }\n        }).filter(arg => arg).join(' ');\n\n        if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {\n          logCallback({\n            level: LogLevel[level].toLowerCase(),\n            message,\n            args,\n            type: instance.name\n          });\n        }\n      };\n    }\n  }\n}\n\nexport { LogLevel, Logger, setLogLevel, setUserLogHandler };","map":{"version":3,"sources":["../../src/logger.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type LogLevelString =\n  | 'debug'\n  | 'verbose'\n  | 'info'\n  | 'warn'\n  | 'error'\n  | 'silent';\n\nexport interface LogOptions {\n  level: LogLevelString;\n}\n\nexport type LogCallback = (callbackParams: LogCallbackParams) => void;\n\nexport interface LogCallbackParams {\n  level: LogLevelString;\n  message: string;\n  args: unknown[];\n  type: string;\n}\n\n/**\n * A container for all of the Logger instances\n */\nexport const instances: Logger[] = [];\n\n/**\n * The JS SDK supports 5 log levels and also allows a user the ability to\n * silence the logs altogether.\n *\n * The order is a follows:\n * DEBUG < VERBOSE < INFO < WARN < ERROR\n *\n * All of the log types above the current log level will be captured (i.e. if\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\n * `VERBOSE` logs will not)\n */\nexport enum LogLevel {\n  DEBUG,\n  VERBOSE,\n  INFO,\n  WARN,\n  ERROR,\n  SILENT\n}\n\nconst levelStringToEnum: { [key in LogLevelString]: LogLevel } = {\n  'debug': LogLevel.DEBUG,\n  'verbose': LogLevel.VERBOSE,\n  'info': LogLevel.INFO,\n  'warn': LogLevel.WARN,\n  'error': LogLevel.ERROR,\n  'silent': LogLevel.SILENT\n};\n\n/**\n * The default log level\n */\nconst defaultLogLevel: LogLevel = LogLevel.INFO;\n\n/**\n * We allow users the ability to pass their own log handler. We will pass the\n * type of log, the current log level, and any other arguments passed (i.e. the\n * messages that the user wants to log) to this function.\n */\nexport type LogHandler = (\n  loggerInstance: Logger,\n  logType: LogLevel,\n  ...args: unknown[]\n) => void;\n\n/**\n * By default, `console.debug` is not displayed in the developer console (in\n * chrome). To avoid forcing users to have to opt-in to these logs twice\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\n * logs to the `console.log` function.\n */\nconst ConsoleMethod = {\n  [LogLevel.DEBUG]: 'log',\n  [LogLevel.VERBOSE]: 'log',\n  [LogLevel.INFO]: 'info',\n  [LogLevel.WARN]: 'warn',\n  [LogLevel.ERROR]: 'error'\n};\n\n/**\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\n * messages on to their corresponding console counterparts (if the log method\n * is supported by the current log level)\n */\nconst defaultLogHandler: LogHandler = (instance, logType, ...args): void => {\n  if (logType < instance.logLevel) {\n    return;\n  }\n  const now = new Date().toISOString();\n  const method = ConsoleMethod[logType as keyof typeof ConsoleMethod];\n  if (method) {\n    console[method as 'log' | 'info' | 'warn' | 'error'](\n      `[${now}]  ${instance.name}:`,\n      ...args\n    );\n  } else {\n    throw new Error(\n      `Attempted to log a message with an invalid logType (value: ${logType})`\n    );\n  }\n};\n\nexport class Logger {\n  /**\n   * Gives you an instance of a Logger to capture messages according to\n   * Firebase's logging scheme.\n   *\n   * @param name The name that the logs will be associated with\n   */\n  constructor(public name: string) {\n    /**\n     * Capture the current instance for later use\n     */\n    instances.push(this);\n  }\n\n  /**\n   * The log level of the given Logger instance.\n   */\n  private _logLevel = defaultLogLevel;\n\n  get logLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  set logLevel(val: LogLevel) {\n    if (!(val in LogLevel)) {\n      throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\n    }\n    this._logLevel = val;\n  }\n\n  // Workaround for setter/getter having to be the same type.\n  setLogLevel(val: LogLevel | LogLevelString): void {\n    this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\n  }\n\n  /**\n   * The main (internal) log handler for the Logger instance.\n   * Can be set to a new function in internal package code but not by user.\n   */\n  private _logHandler: LogHandler = defaultLogHandler;\n  get logHandler(): LogHandler {\n    return this._logHandler;\n  }\n  set logHandler(val: LogHandler) {\n    if (typeof val !== 'function') {\n      throw new TypeError('Value assigned to `logHandler` must be a function');\n    }\n    this._logHandler = val;\n  }\n\n  /**\n   * The optional, additional, user-defined log handler for the Logger instance.\n   */\n  private _userLogHandler: LogHandler | null = null;\n  get userLogHandler(): LogHandler | null {\n    return this._userLogHandler;\n  }\n  set userLogHandler(val: LogHandler | null) {\n    this._userLogHandler = val;\n  }\n\n  /**\n   * The functions below are all based on the `console` interface\n   */\n\n  debug(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\n    this._logHandler(this, LogLevel.DEBUG, ...args);\n  }\n  log(...args: unknown[]): void {\n    this._userLogHandler &&\n      this._userLogHandler(this, LogLevel.VERBOSE, ...args);\n    this._logHandler(this, LogLevel.VERBOSE, ...args);\n  }\n  info(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\n    this._logHandler(this, LogLevel.INFO, ...args);\n  }\n  warn(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\n    this._logHandler(this, LogLevel.WARN, ...args);\n  }\n  error(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\n    this._logHandler(this, LogLevel.ERROR, ...args);\n  }\n}\n\nexport function setLogLevel(level: LogLevelString | LogLevel): void {\n  instances.forEach(inst => {\n    inst.setLogLevel(level);\n  });\n}\n\nexport function setUserLogHandler(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  for (const instance of instances) {\n    let customLogLevel: LogLevel | null = null;\n    if (options && options.level) {\n      customLogLevel = levelStringToEnum[options.level];\n    }\n    if (logCallback === null) {\n      instance.userLogHandler = null;\n    } else {\n      instance.userLogHandler = (\n        instance: Logger,\n        level: LogLevel,\n        ...args: unknown[]\n      ) => {\n        const message = args\n          .map(arg => {\n            if (arg == null) {\n              return null;\n            } else if (typeof arg === 'string') {\n              return arg;\n            } else if (typeof arg === 'number' || typeof arg === 'boolean') {\n              return arg.toString();\n            } else if (arg instanceof Error) {\n              return arg.message;\n            } else {\n              try {\n                return JSON.stringify(arg);\n              } catch (ignored) {\n                return null;\n              }\n            }\n          })\n          .filter(arg => arg)\n          .join(' ');\n        if (level >= (customLogLevel ?? instance.logLevel)) {\n          logCallback({\n            level: LogLevel[level].toLowerCase() as LogLevelString,\n            message,\n            args,\n            type: instance.name\n          });\n        }\n      };\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}